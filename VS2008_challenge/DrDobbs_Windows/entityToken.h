// /////////////////////////////////////////////////////////////////////////////
// DR DOBB'S CHALLENGES
//
// Filename       : entityAI.cpp
// Date           : February 2008
//
// Description    : This file defines the CEntityToken class for the collectible
//                  tokens.  Tokens can be IDLE (not moving), GRABBED (moving
//                  toward the player), or COLLECTED (hidden and inactive).
//
//                  Init() must be called at the beginning of game level
//                  after all entities have been created, primarily to
//                  ensure CEntityToken has a pointer to the current
//                  player entity.
//
// ///////////////////////////////////////////////////////////////////////////
#pragma once

// ///////////////////////////////////////////////////////////////////////////
// HEADERS (#include)
// ///////////////////////////////////////////////////////////////////////////
#include "entity.h"
#include "entityPlayer.h"

// ///////////////////////////////////////////////////////////////////////////
// CONSTANTS (#define)
// ///////////////////////////////////////////////////////////////////////////
#define TOKEN_STATE_IDLE         0
#define TOKEN_STATE_GRABBED      1
#define TOKEN_STATE_COLLECTED    2

// ///////////////////////////////////////////////////////////////////////////
// CLASS DEFINITION
// ///////////////////////////////////////////////////////////////////////////
class CEntityToken : public CEntity {

   // ////////////////////////////////////////////////////////////////////////
   // PROTECTED/PRIVATE METHODS
   // ////////////////////////////////////////////////////////////////////////
   protected:
      // /////////////////////////////////////////////////////////////////////
      // STATIC COMPONENTS
      static CEntityToken*   pSelectedToken;
      static CEntityPlayer*  pPlayer;
      static int startFrame;

      // /////////////////////////////////////////////////////////////////////
      // VARIABLES
      CSprite* pSpriteToken;
      CSprite* pSpriteSelect;
      CSound*  pSoundCollect;
      int state;

      // /////////////////////////////////////////////////////////////////////
      // METHODS
      bool handleCollision(float* xDiff, float* yDiff);
      bool collisionDetected(int xVal, int yVal);
      void update();

   // ////////////////////////////////////////////////////////////////////////
   // PUBLIC METHODS
   // ////////////////////////////////////////////////////////////////////////
   public:
      // /////////////////////////////////////////////////////////////////////
      // CONSTRUCTORS/DESTRUCTORS
      CEntityToken(int xVal, int yVal);
      ~CEntityToken();

      // /////////////////////////////////////////////////////////////////////
      // METHODS
      void Grab();
      void Collect();
      bool IsMouseOver();

      // /////////////////////////////////////////////////////////////////////
      // STATIC METHODS
      static void Init(CEntityPlayer* player);
      static bool HandleGrab();
};

// ///////////////////////////////////////////////////////////////////////////
// END OF CODE
// ///////////////////////////////////////////////////////////////////////////