// /////////////////////////////////////////////////////////////////////////////
// DR DOBB'S CHALLENGES
//
// Filename       : sound.h
// Date           : February 2008
//
// Description    : This file defines the CSound class used to handle all sound
//                  loading and playing.
//
//                  Init() must be called at the beginning of the main program
//                  to ensure all sound data is preloaded before any sounds
//                  are used.
//
// ///////////////////////////////////////////////////////////////////////////
#pragma once

// ///////////////////////////////////////////////////////////////////////////
// HEADERS (#include)
// ///////////////////////////////////////////////////////////////////////////
#include <vector>
#include <map>
#include <dsound.h>
#include "global.h"

// ///////////////////////////////////////////////////////////////////////////
// CONSTANTS (#define)
// ///////////////////////////////////////////////////////////////////////////


// ///////////////////////////////////////////////////////////////////////////
// CLASS DEFINITION
// ///////////////////////////////////////////////////////////////////////////
class CSound {

   // ////////////////////////////////////////////////////////////////////////
   // PROTECTED/PRIVATE METHODS
   // ////////////////////////////////////////////////////////////////////////
   protected:
      // /////////////////////////////////////////////////////////////////////
      // STATIC COMPONENTS
      static LPDIRECTSOUND8 pDSound;
      static std::vector<LPDIRECTSOUNDBUFFER>            allBuffers;
      static std::map<std::string,LPDIRECTSOUNDBUFFER>   mapBuffers;

      // /////////////////////////////////////////////////////////////////////
      // VARIABLES
      LPDIRECTSOUNDBUFFER pBuffer;

      // /////////////////////////////////////////////////////////////////////
      // METHODS
      static void preloadAllSounds();
      static void preloadSound(char* filename);


   // ////////////////////////////////////////////////////////////////////////
   // PUBLIC METHODS
   // ////////////////////////////////////////////////////////////////////////
   public:
      // /////////////////////////////////////////////////////////////////////
      // CONSTRUCTORS/DESTRUCTORS
      CSound(char* filename);
      ~CSound();

      // /////////////////////////////////////////////////////////////////////
      // METHODS
      void Play();
      void Stop();

      // /////////////////////////////////////////////////////////////////////
      // STATIC METHODS
      static void Init(HWND hWnd);
      static void Release();
};

// ///////////////////////////////////////////////////////////////////////////
// END OF CODE
// ///////////////////////////////////////////////////////////////////////////
