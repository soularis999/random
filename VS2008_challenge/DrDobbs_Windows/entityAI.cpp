// /////////////////////////////////////////////////////////////////////////////
// DR DOBB'S CHALLENGES
//
// Filename       : entityAI.cpp
// Date           : February 2008
//
// Description    : Refer to description in corresponding header.
//
// ///////////////////////////////////////////////////////////////////////////


// ///////////////////////////////////////////////////////////////////////////
// HEADERS (#include)
// ///////////////////////////////////////////////////////////////////////////
#include "entityAI.h"

// ///////////////////////////////////////////////////////////////////////////
// CONSTRUCTORS AND DESTRUCTORS
// ///////////////////////////////////////////////////////////////////////////
CEntityAI::CEntityAI(int xVal, int yVal, int typeVal, int collX, int collY) : CEntity(xVal,yVal,collX,collY) {
   // Define type
   type = typeVal;

   // Append AI to allAI, which is used to quickly iterate through AI to
   // handle collisions.
   allAI.push_back(this);

   // Initialize common sprites
   pSpriteLeft    = NULL;
   pSpriteRight   = NULL;
}

CEntityAI::~CEntityAI() {
   // Delete sprites
   if (pSpriteLeft != NULL) delete pSpriteLeft;
   if (pSpriteRight != NULL) delete pSpriteRight;
}

// ///////////////////////////////////////////////////////////////////////////
// PROTECTED/PRIVATE METHODS
// ///////////////////////////////////////////////////////////////////////////
void CEntityAI::update() {
   // Update movements
   handleMovement();

   // Update collisions
   handleCollision();

   // Update sprite
   handleSprite();

   // Unhide and move active sprite
   if (pSpriteInactive != pSpriteActive) {
      if (pSpriteInactive != NULL) pSpriteInactive->Hide();
      pSpriteInactive = pSpriteActive;
      pSpriteActive->Unhide();
   }
   pSpriteActive->Move(x,y);
}


// ///////////////////////////////////////////////////////////////////////////
// END OF CODE
// ///////////////////////////////////////////////////////////////////////////