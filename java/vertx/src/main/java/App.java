import io.vertx.core.AbstractVerticle;
import io.vertx.core.AsyncResult;
import io.vertx.core.Closeable;
import io.vertx.core.Context;
import io.vertx.core.Handler;
import io.vertx.core.Vertx;
import io.vertx.core.http.HttpServer;
import io.vertx.core.http.HttpServerOptions;
import io.vertx.core.http.ServerWebSocket;
import io.vertx.core.logging.Logger;
import io.vertx.core.logging.LoggerFactory;
import java.util.ArrayDeque;
import java.util.Queue;
import java.util.Set;
import java.util.concurrent.CopyOnWriteArraySet;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App extends AbstractVerticle {

    private static final Logger LOGGER = LoggerFactory.getLogger(App.class);

    private final Set<ServerWebSocket> clients = new CopyOnWriteArraySet<>();
    private final Queue<String> messages = new ArrayDeque<>();

    public static void main(String[] args) {
        Vertx.vertx().deployVerticle(new App());
    }

    @Override
    public void init(Vertx vertx, Context context) {
        super.init(vertx, context);

        final HttpServerOptions httpServerOptions = new HttpServerOptions()
            .setTcpKeepAlive(true)
            .setReuseAddress(true)
            .setTcpKeepAlive(true)
            .setTcpNoDelay(true);
        final HttpServer httpServer = vertx
            .createHttpServer(httpServerOptions)
            .requestHandler(
                (request) -> request.response().sendFile("index.html"))
            .websocketHandler(new WebsocketHandler())
            .listen(11111);

        vertx.setPeriodic(1000, (time) -> {
            String tmp;
            while((tmp = messages.poll()) != null) {
                final String message = tmp;
                clients.forEach(client -> {
                    client.writeTextMessage(message);
                });
            }
        });

        context.addCloseHook(completionHandler -> {
            httpServer.close();
        });
    }

    private class WebsocketHandler implements Handler<ServerWebSocket> {

        @Override
        public void handle(final ServerWebSocket event) {
            clients.add(event);
            event.closeHandler(event1 -> {
                clients.remove(event);
            });

            event.handler(buffer -> {
               messages.add(new String(buffer.getBytes()));
            });
        }
    }
}
